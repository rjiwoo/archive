"검색하면서 그림으로 학습하세요!!!"

백트래킹 / union-find / prim / kruskal / dijkstra

백트래킹 -> 이건 도대체 시간 계산을 어떻게 ?
  - 재귀호출 기반으로 안되는 케이스를 제거
  - 교과서 적으로 최악 : 모든 경우 탐색 (N^N, N!, 2^N)
	-> 내가 어느정도 제거할 수 있을까 ? (대략적으로 푼다)
  -> 보통 N이 크지 않다

union-find
- 단순 union-find : O(N)
- 경로 압축: 조금 느린 O(1) == O(역아커만(N))
	- 매우 느리게 커지는 함수
- rank + 경로 압축 : 거의 O(1)

prim (정점을 기준으로 bfs 처럼 탐색)
- 힙에 간선 후보를 넣고, 최소값을 계속 뽑는다
- O(VlogV + ElogV)  -> O(ElogV)
  - VlogV : 각 정점일 힙에 들어가야 한다
  - ElogV : 간선의 수 만큼 힙에 들어갈 수 있다.
	- 우리가 배운 코드는 정점이 중복되게 삽입 : O(ElogE)
		- decrease key 까지만 들어가있다.
	- 최적화 기법을 써야한다.
  - 피보나치 힙을 쓰면 훨씬 빨라진다.

kruskal (간선 전체를 보자)
- 간선들을 정렬 + 간선들을 선택(사이클 검사하면서)
   O(ElogE)		E * O(1) - Union-find

dijkstra (정점에서 누적거리가 짧은 노드만 선택)
- 간선들이 힙에 들어가는 시간
   E        O(logV)
	-> O(ElogV)


